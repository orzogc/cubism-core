/* automatically generated by rust-bindgen 0.59.1 */

#[doc = " Cubism version identifier."]
pub type csmVersion = ::std::os::raw::c_uint;
#[doc = " Necessary alignment for mocs (in bytes)."]
pub const csmAlignofMoc: ::std::os::raw::c_uint = 64;
#[doc = " Necessary alignment for models (in bytes)."]
pub const csmAlignofModel: ::std::os::raw::c_uint = 16;
#[doc = " Alignment constraints."]
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[doc = " Additive blend mode mask."]
pub const csmBlendAdditive: ::std::os::raw::c_uint = 1;
#[doc = " Multiplicative blend mode mask."]
pub const csmBlendMultiplicative: ::std::os::raw::c_uint = 2;
#[doc = " Double-sidedness mask."]
pub const csmIsDoubleSided: ::std::os::raw::c_uint = 4;
#[doc = " Clipping mask inversion mode mask."]
pub const csmIsInvertedMask: ::std::os::raw::c_uint = 8;
#[doc = " Bit masks for non-dynamic drawable flags."]
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[doc = " Flag set when visible."]
pub const csmIsVisible: ::std::os::raw::c_uint = 1;
#[doc = " Flag set when visibility did change."]
pub const csmVisibilityDidChange: ::std::os::raw::c_uint = 2;
#[doc = " Flag set when opacity did change."]
pub const csmOpacityDidChange: ::std::os::raw::c_uint = 4;
#[doc = " Flag set when draw order did change."]
pub const csmDrawOrderDidChange: ::std::os::raw::c_uint = 8;
#[doc = " Flag set when render order did change."]
pub const csmRenderOrderDidChange: ::std::os::raw::c_uint = 16;
#[doc = " Flag set when vertex positions did change."]
pub const csmVertexPositionsDidChange: ::std::os::raw::c_uint = 32;
#[doc = " Bit masks for dynamic drawable flags."]
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
#[doc = " Bitfield."]
pub type csmFlags = ::std::os::raw::c_uchar;
#[doc = " unknown"]
pub const csmMocVersion_Unknown: ::std::os::raw::c_uint = 0;
#[doc = " moc3 file version 3.0.00 - 3.2.07"]
pub const csmMocVersion_30: ::std::os::raw::c_uint = 1;
#[doc = " moc3 file version 3.3.00 - 3.3.03"]
pub const csmMocVersion_33: ::std::os::raw::c_uint = 2;
#[doc = " moc3 file version 4.0.00 -"]
pub const csmMocVersion_40: ::std::os::raw::c_uint = 3;
#[doc = " moc3 file format version."]
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
#[doc = " moc3 version identifier."]
pub type csmMocVersion = ::std::os::raw::c_uint;
#[doc = " 2 component vector."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct csmVector2 {
    #[doc = " First component."]
    pub X: f32,
    #[doc = " Second component."]
    pub Y: f32,
}
#[test]
fn bindgen_test_layout_csmVector2() {
    assert_eq!(
        ::std::mem::size_of::<csmVector2>(),
        8usize,
        concat!("Size of: ", stringify!(csmVector2))
    );
    assert_eq!(
        ::std::mem::align_of::<csmVector2>(),
        4usize,
        concat!("Alignment of ", stringify!(csmVector2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<csmVector2>())).X as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(csmVector2),
            "::",
            stringify!(X)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<csmVector2>())).Y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(csmVector2),
            "::",
            stringify!(Y)
        )
    );
}
#[doc = " Log handler."]
#[doc = ""]
#[doc = " @param  message  Null-terminated string message to log."]
pub type csmLogFunction =
    ::std::option::Option<unsafe extern "C" fn(message: *const ::std::os::raw::c_char)>;
extern "C" {
    #[doc = " Queries Core version."]
    #[doc = ""]
    #[doc = " @return  Core version."]
    pub fn csmGetVersion() -> csmVersion;
}
extern "C" {
    #[doc = " Gets Moc file supported latest version."]
    #[doc = ""]
    #[doc = " @return csmMocVersion (Moc file latest format version)."]
    pub fn csmGetLatestMocVersion() -> csmMocVersion;
}
extern "C" {
    #[doc = " Gets Moc file format version."]
    #[doc = ""]
    #[doc = " @param  address  Address of moc."]
    #[doc = " @param  size     Size of moc (in bytes)."]
    #[doc = ""]
    #[doc = " @return csmMocVersion"]
    pub fn csmGetMocVersion(
        address: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_uint,
    ) -> csmMocVersion;
}
extern "C" {
    #[doc = " Queries log handler."]
    #[doc = ""]
    #[doc = " @return  Log handler."]
    pub fn csmGetLogFunction() -> csmLogFunction;
}
extern "C" {
    #[doc = " Sets log handler."]
    #[doc = ""]
    #[doc = " @param  handler  Handler to use."]
    pub fn csmSetLogFunction(handler: csmLogFunction);
}
extern "C" {
    #[doc = " Tries to revive a moc from bytes in place."]
    #[doc = ""]
    #[doc = " @param  address  Address of unrevived moc. The address must be aligned to 'csmAlignofMoc'."]
    #[doc = " @param  size     Size of moc (in bytes)."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0' otherwise."]
    pub fn csmReviveMocInPlace(
        address: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_uint,
    ) -> *mut csmMoc;
}
extern "C" {
    #[doc = " Queries size of a model in bytes."]
    #[doc = ""]
    #[doc = " @param  moc  Moc to query."]
    #[doc = ""]
    #[doc = " @return  Valid size on success; '0' otherwise."]
    pub fn csmGetSizeofModel(moc: *const csmMoc) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[doc = " Tries to instantiate a model in place."]
    #[doc = ""]
    #[doc = " @param  moc      Source moc."]
    #[doc = " @param  address  Address to place instance at. Address must be aligned to 'csmAlignofModel'."]
    #[doc = " @param  size     Size of memory block for instance (in bytes)."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0' otherwise."]
    pub fn csmInitializeModelInPlace(
        moc: *const csmMoc,
        address: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_uint,
    ) -> *mut csmModel;
}
extern "C" {
    #[doc = " Updates a model."]
    #[doc = ""]
    #[doc = " @param  model  Model to update."]
    pub fn csmUpdateModel(model: *mut csmModel);
}
extern "C" {
    #[doc = " Reads info on a model canvas."]
    #[doc = ""]
    #[doc = " @param  model              Model query."]
    #[doc = ""]
    #[doc = " @param  outSizeInPixels    Canvas dimensions."]
    #[doc = " @param  outOriginInPixels  Origin of model on canvas."]
    #[doc = " @param  outPixelsPerUnit   Aspect used for scaling pixels to units."]
    pub fn csmReadCanvasInfo(
        model: *const csmModel,
        outSizeInPixels: *mut csmVector2,
        outOriginInPixels: *mut csmVector2,
        outPixelsPerUnit: *mut f32,
    );
}
extern "C" {
    #[doc = " Gets number of parameters."]
    #[doc = ""]
    #[doc = " @param[in]  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid count on success; '-1' otherwise."]
    pub fn csmGetParameterCount(model: *const csmModel) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Gets parameter IDs."]
    #[doc = " All IDs are null-terminated ANSI strings."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0' otherwise."]
    pub fn csmGetParameterIds(model: *const csmModel) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Gets minimum parameter values."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0' otherwise."]
    pub fn csmGetParameterMinimumValues(model: *const csmModel) -> *const f32;
}
extern "C" {
    #[doc = " Gets maximum parameter values."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0' otherwise."]
    pub fn csmGetParameterMaximumValues(model: *const csmModel) -> *const f32;
}
extern "C" {
    #[doc = " Gets default parameter values."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0' otherwise."]
    pub fn csmGetParameterDefaultValues(model: *const csmModel) -> *const f32;
}
extern "C" {
    #[doc = " Gets read/write parameter values buffer."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0' otherwise."]
    pub fn csmGetParameterValues(model: *mut csmModel) -> *mut f32;
}
extern "C" {
    #[doc = " Gets number of key values of each parameter."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0' otherwise."]
    pub fn csmGetParameterKeyCounts(model: *const csmModel) -> *const ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Gets key values of each parameter."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0' otherwise."]
    pub fn csmGetParameterKeyValues(model: *const csmModel) -> *mut *const f32;
}
extern "C" {
    #[doc = " Gets number of parts."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid count on success; '-1' otherwise."]
    pub fn csmGetPartCount(model: *const csmModel) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Gets parts IDs."]
    #[doc = " All IDs are null-terminated ANSI strings."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0' otherwise."]
    pub fn csmGetPartIds(model: *const csmModel) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Gets read/write part opacities buffer."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0' otherwise."]
    pub fn csmGetPartOpacities(model: *mut csmModel) -> *mut f32;
}
extern "C" {
    #[doc = " Gets part's parent part indices."]
    #[doc = ""]
    #[doc = " @param   model   Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0' otherwise."]
    pub fn csmGetPartParentPartIndices(model: *const csmModel) -> *const ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Gets number of drawables."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid count on success; '-1' otherwise."]
    pub fn csmGetDrawableCount(model: *const csmModel) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Gets drawable IDs."]
    #[doc = " All IDs are null-terminated ANSI strings."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0' otherwise."]
    pub fn csmGetDrawableIds(model: *const csmModel) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Gets constant drawable flags."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0' otherwise."]
    pub fn csmGetDrawableConstantFlags(model: *const csmModel) -> *const csmFlags;
}
extern "C" {
    #[doc = " Gets dynamic drawable flags."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0' otherwise."]
    pub fn csmGetDrawableDynamicFlags(model: *const csmModel) -> *const csmFlags;
}
extern "C" {
    #[doc = " Gets drawable texture indices."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0' otherwise."]
    pub fn csmGetDrawableTextureIndices(model: *const csmModel) -> *const ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Gets drawable draw orders."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0' otherwise."]
    pub fn csmGetDrawableDrawOrders(model: *const csmModel) -> *const ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Gets drawable render orders."]
    #[doc = " The higher the order, the more up front a drawable is."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0'otherwise."]
    pub fn csmGetDrawableRenderOrders(model: *const csmModel) -> *const ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Gets drawable opacities."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0' otherwise."]
    pub fn csmGetDrawableOpacities(model: *const csmModel) -> *const f32;
}
extern "C" {
    #[doc = " Gets numbers of masks of each drawable."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0' otherwise."]
    pub fn csmGetDrawableMaskCounts(model: *const csmModel) -> *const ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Gets mask indices of each drawable."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0' otherwise."]
    pub fn csmGetDrawableMasks(model: *const csmModel) -> *mut *const ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Gets number of vertices of each drawable."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0' otherwise."]
    pub fn csmGetDrawableVertexCounts(model: *const csmModel) -> *const ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Gets vertex position data of each drawable."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; a null pointer otherwise."]
    pub fn csmGetDrawableVertexPositions(model: *const csmModel) -> *mut *const csmVector2;
}
extern "C" {
    #[doc = " Gets texture coordinate data of each drawables."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0' otherwise."]
    pub fn csmGetDrawableVertexUvs(model: *const csmModel) -> *mut *const csmVector2;
}
extern "C" {
    #[doc = " Gets number of triangle indices for each drawable."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0' otherwise."]
    pub fn csmGetDrawableIndexCounts(model: *const csmModel) -> *const ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Gets triangle index data for each drawable."]
    #[doc = ""]
    #[doc = " @param  model  Model to query."]
    #[doc = ""]
    #[doc = " @return  Valid pointer on success; '0' otherwise."]
    pub fn csmGetDrawableIndices(model: *const csmModel) -> *mut *const ::std::os::raw::c_ushort;
}
extern "C" {
    #[doc = " Resets all dynamic drawable flags."]
    #[doc = ""]
    #[doc = " @param  model  Model containing flags."]
    pub fn csmResetDrawableDynamicFlags(model: *mut csmModel);
}
